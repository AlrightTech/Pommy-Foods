// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to "mysql" or "sqlite" if needed
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STORE_OWNER
  DRIVER
}

enum OrderStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  KITCHEN_PREP
  READY_FOR_DELIVERY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  IN_TRANSIT
  DELIVERED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  PARTIALLY_PAID
}

enum PaymentMethod {
  CASH
  DIRECT_DEBIT
  ONLINE
}

enum ReturnStatus {
  PENDING
  PROCESSED
}

// User Model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  role          UserRole
  phone         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  store         Store?
  driver        Driver?
  createdOrders Order[]   @relation("OrderCreator")
  approvedOrders Order[]  @relation("OrderApprover")
  deliveries    Delivery[]

  @@index([email])
  @@index([role])
}

// Store Model
model Store {
  id                  String   @id @default(cuid())
  name                String
  ownerId             String   @unique
  address             String
  city                String
  state               String?
  zipCode             String?
  phone               String?
  email               String?
  creditLimit         Decimal  @default(0) @db.Decimal(10, 2)
  currentCredit       Decimal  @default(0) @db.Decimal(10, 2)
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  owner               User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  stockLevels         StockLevel[]
  orders              Order[]
  invoices            Invoice[]
  returns             Return[]
  deliveryAddresses   Delivery[]

  @@index([ownerId])
}

// Product Model
model Product {
  id                  String   @id @default(cuid())
  name                String
  sku                 String   @unique
  description         String?
  unitPrice           Decimal  @db.Decimal(10, 2)
  costPrice           Decimal  @db.Decimal(10, 2)
  unit                String   // e.g., "piece", "box", "kg"
  category            String?
  minStockThreshold   Int      @default(0)
  isActive            Boolean  @default(true)
  shelfLifeDays       Int?     // For expiry tracking
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  stockLevels         StockLevel[]
  orderItems          OrderItem[]
  returnItems         ReturnItem[]
  kitchenSheetItems   KitchenSheetItem[]

  @@index([sku])
  @@index([isActive])
}

// Stock Level Model (Store's Pommy Product Stock)
model StockLevel {
  id                  String   @id @default(cuid())
  storeId             String
  productId           String
  currentStock        Int      @default(0)
  lastUpdated         DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  store               Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  product             Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([storeId, productId])
  @@index([storeId])
  @@index([productId])
}

// Order Model
model Order {
  id                  String      @id @default(cuid())
  orderNumber         String      @unique
  storeId             String
  createdById         String
  status              OrderStatus @default(DRAFT)
  totalAmount         Decimal     @db.Decimal(10, 2)
  notes               String?
  isAutoGenerated     Boolean     @default(false) // For replenishment orders
  approvedById        String?
  approvedAt          DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // Relations
  store               Store       @relation(fields: [storeId], references: [id])
  createdBy           User        @relation("OrderCreator", fields: [createdById], references: [id])
  approvedBy          User?       @relation("OrderApprover", fields: [approvedById], references: [id])
  items               OrderItem[]
  kitchenSheet        KitchenSheet?
  delivery            Delivery?
  invoice             Invoice?

  @@index([storeId])
  @@index([status])
  @@index([orderNumber])
  @@index([createdAt])
}

// Order Item Model
model OrderItem {
  id                  String   @id @default(cuid())
  orderId             String
  productId           String
  quantity            Int
  unitPrice           Decimal  @db.Decimal(10, 2)
  subtotal            Decimal  @db.Decimal(10, 2)
  createdAt           DateTime @default(now())

  // Relations
  order               Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product             Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

// Kitchen Sheet Model
model KitchenSheet {
  id                  String              @id @default(cuid())
  orderId             String              @unique
  generatedAt         DateTime            @default(now())
  status              String              @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  completedAt         DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Relations
  order               Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  items               KitchenSheetItem[]

  @@index([orderId])
  @@index([status])
}

// Kitchen Sheet Item Model
model KitchenSheetItem {
  id                  String          @id @default(cuid())
  kitchenSheetId      String
  productId           String
  quantity            Int
  batchNumber         String?
  expiryDate          DateTime?
  barcode             String?         @unique
  qrCode              String?
  packedAt            DateTime?
  createdAt           DateTime        @default(now())

  // Relations
  kitchenSheet        KitchenSheet    @relation(fields: [kitchenSheetId], references: [id], onDelete: Cascade)
  product             Product         @relation(fields: [productId], references: [id])

  @@index([kitchenSheetId])
  @@index([productId])
  @@index([barcode])
}

// Delivery Model
model Delivery {
  id                  String          @id @default(cuid())
  orderId             String          @unique
  deliveryNumber      String          @unique
  driverId            String?
  storeId             String
  status              DeliveryStatus  @default(PENDING)
  scheduledDate       DateTime?
  deliveredAt         DateTime?
  deliveryAddress     String
  city                String
  state               String?
  zipCode             String?
  latitude            Decimal?        @db.Decimal(10, 8)
  longitude           Decimal?        @db.Decimal(10, 8)
  proofOfDelivery     String?         // URL to signature/photo
  notes               String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  order               Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver              User?           @relation(fields: [driverId], references: [id])
  store               Store           @relation(fields: [storeId], references: [id])
  temperatureLogs     TemperatureLog[]
  returns             Return[]
  payment             Payment?

  @@index([orderId])
  @@index([driverId])
  @@index([status])
  @@index([deliveryNumber])
}

// Driver Model (Extended User Info)
model Driver {
  id                  String      @id @default(cuid())
  userId              String      @unique
  licenseNumber       String?
  vehicleInfo         String?
  phone               String?
  isAvailable         Boolean     @default(true)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // Relations
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Temperature Log Model
model TemperatureLog {
  id                  String      @id @default(cuid())
  deliveryId          String
  temperature         Decimal     @db.Decimal(5, 2) // e.g., -18.50 for freezer
  recordedAt          DateTime    @default(now())
  isIotSensor         Boolean     @default(false)
  sensorId            String?
  notes               String?
  createdAt           DateTime    @default(now())

  // Relations
  delivery            Delivery    @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([recordedAt])
}

// Return Model
model Return {
  id                  String          @id @default(cuid())
  deliveryId          String
  storeId             String
  status              ReturnStatus    @default(PENDING)
  totalValue          Decimal         @db.Decimal(10, 2)
  reason              String?
  returnedAt          DateTime        @default(now())
  processedAt         DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  delivery            Delivery        @relation(fields: [deliveryId], references: [id])
  store               Store           @relation(fields: [storeId], references: [id])
  items               ReturnItem[]

  @@index([deliveryId])
  @@index([storeId])
  @@index([status])
}

// Return Item Model
model ReturnItem {
  id                  String      @id @default(cuid())
  returnId            String
  productId           String
  quantity            Int
  unitPrice           Decimal     @db.Decimal(10, 2)
  subtotal            Decimal     @db.Decimal(10, 2)
  expiryDate          DateTime    // Must be expired
  reason              String?
  createdAt           DateTime    @default(now())

  // Relations
  return              Return      @relation(fields: [returnId], references: [id], onDelete: Cascade)
  product             Product     @relation(fields: [productId], references: [id])

  @@index([returnId])
  @@index([productId])
}

// Invoice Model
model Invoice {
  id                  String          @id @default(cuid())
  invoiceNumber       String          @unique
  orderId             String          @unique
  storeId             String
  subtotal            Decimal         @db.Decimal(10, 2)
  returnAdjustment    Decimal         @default(0) @db.Decimal(10, 2)
  totalAmount         Decimal         @db.Decimal(10, 2)
  status              PaymentStatus   @default(PENDING)
  dueDate             DateTime?
  issuedAt            DateTime        @default(now())
  paidAt              DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  order               Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  store               Store           @relation(fields: [storeId], references: [id])
  payments            Payment[]

  @@index([orderId])
  @@index([storeId])
  @@index([status])
  @@index([invoiceNumber])
  @@index([dueDate])
}

// Payment Model
model Payment {
  id                  String          @id @default(cuid())
  invoiceId           String
  deliveryId          String?         @unique
  amount              Decimal         @db.Decimal(10, 2)
  method              PaymentMethod
  transactionId       String?
  reference           String?
  proofOfPayment      String?         // URL to receipt/photo
  collectedBy         String?         // Driver ID if cash
  collectedAt         DateTime?
  bankAccountId       String?         // For direct debit
  status              String          @default("PENDING") // PENDING, COMPLETED, FAILED
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relations
  invoice             Invoice         @relation(fields: [invoiceId], references: [id])
  delivery            Delivery?       @relation(fields: [deliveryId], references: [id])

  @@index([invoiceId])
  @@index([status])
}

